2. Input Validation in Django

Input validation is crucial for preventing malicious input, ensuring data integrity, and maintaining application security.

Steps for Input Validation:

Model Field Validation: In Django, models automatically handle some level of validation (e.g., CharField, IntegerField). You can also add custom validation by overriding the clean() method in your models.

from django.db import models
from django.core.exceptions import ValidationError

class MyModel(models.Model):
    name = models.CharField(max_length=100)

    def clean(self):
        # Custom validation logic
        if len(self.name) < 3:
            raise ValidationError('Name must be at least 3 characters long.')


Form Validation: In Django forms, you can define custom validation logic using clean_<fieldname>() methods or override the clean() method for more complex checks.

from django import forms

class MyForm(forms.Form):
    email = forms.EmailField()

    def clean_email(self):
        email = self.cleaned_data.get('email')
        if '@example.com' not in email:
            raise forms.ValidationError('Invalid email domain.')
        return email


Regular Expressions: You can use regular expressions to validate fields more strictly.

import re
from django.core.exceptions import ValidationError

def validate_phone(value):
    if not re.match(r'^\+?1?\d{9,15}$', value):
        raise ValidationError('Phone number is not valid.')


Limit Input Length: In forms or models, always limit the length of input fields to prevent overly long input (e.g., for strings or files).

class MyModel(models.Model):
    description = models.TextField(max_length=500)


Field Types: Use the appropriate field types (e.g., IntegerField, DateTimeField, EmailField) to ensure proper data types are accepted.

3. Additional Considerations

Sanitize User Input: For sensitive input like HTML, use Django's built-in sanitization functions (django.utils.html.escape() and bleach library) to remove any malicious content.

Third-Party Libraries: You can also use libraries like django-clean-fields for additional validation or use django-validators for a set of prebuilt validators.

CSRF and AJAX Compatibility: If youâ€™re using JavaScript for sending requests (e.g., with AJAX), remember to include the CSRF token, as mentioned earlier.