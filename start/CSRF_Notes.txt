## üõ°Ô∏è CSRF Protection in Django (v5.2)

### What is CSRF?

Cross-Site Request Forgery (CSRF) is an attack where a malicious website tricks a user's browser into making unwanted requests to a different site where the user is authenticated, potentially performing actions like changing account settings or making purchases.

### How Django Protects Against CSRF

1. **CSRF Cookie**:

   * A random secret value stored in a cookie (`csrftoken`) is sent with each response.
   * The secret changes upon user login for added security.

2. **Hidden Form Field**:

   * A hidden field (`csrfmiddlewaretoken`) is included in all outgoing POST forms.
   * The token is dynamically scrambled with a mask to prevent BREACH attacks.

3. **Token Validation**:

   * For non-safe HTTP methods (POST, PUT, DELETE), the CSRF cookie and form token must match.
   * Only the secret part of the token is validated, allowing for unique tokens per request.

4. **Origin Header Check**:

   * `CsrfViewMiddleware` verifies the `Origin` header against the current host and the `CSRF_TRUSTED_ORIGINS` setting to prevent cross-subdomain attacks.

5. **Referer Header Check**:

   * For HTTPS requests without an `Origin` header, strict referer checking is performed to ensure the request comes from the same domain.

---

### Implementing CSRF Protection

* **Middleware**:

  * Ensure `'django.middleware.csrf.CsrfViewMiddleware'` is included in the `MIDDLEWARE` setting.

* **Forms**:

  * Use `{% csrf_token %}` inside `<form method="post">` tags in templates.

* **AJAX Requests**:

  * Set the `X-CSRFToken` header with the token value from the `csrftoken` cookie.

* **Jinja2 Templates**:

  * Use `{{ csrf_input }}` to include the CSRF token in forms.

* **View Protection**:

  * Use the `@csrf_protect` decorator on views that require CSRF protection.

---

### Disabling CSRF Protection

* **Globally**:

  * Remove `'django.middleware.csrf.CsrfViewMiddleware'` from `MIDDLEWARE`.

* **Per-View**:

  * Use the `@csrf_exempt` decorator to exempt specific views from CSRF protection.

---

### Testing CSRF Protection

* Django's test client automatically handles CSRF tokens, allowing for seamless testing of views that require CSRF protection.

---

### Important Settings

* **`CSRF_COOKIE_NAME`**: Specifies the name of the CSRF cookie.

* **`CSRF_COOKIE_DOMAIN`**: Defines the domain for the CSRF cookie.

* **`CSRF_TRUSTED_ORIGINS`**: List of trusted origins for cross-origin requests.

* **`CSRF_USE_SESSIONS`**: Determines whether to store the CSRF token in the session.

* **`CSRF_COOKIE_HTTPONLY`**: If `True`, the CSRF cookie is inaccessible to JavaScript.

---
